{"version":3,"sources":["components/Date.js","components/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Date","openHandler","number","props","openDate","row","column","this","position","length","gridPosition","open","className","style","joke","onClick","React","Component","Grid","newDates","state","dates","setState","reorder","positions","Set","map","date","newPosition","generateUniqueNumber","add","toString","reset","closedDates","numberSet","Math","floor","random","has","generateNewDates","jokes","i","push","console","log","fetch","response","json","joke_data","value","j","App","resetGrid","grid","current","reorderGrid","createRef","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b39651b1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Date extends React.Component {\r\n\r\n \r\n\r\n    openHandler = (number) => {\r\n        this.props.openDate(number);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let row, column;\r\n        if (this.props.position.length === 2) {\r\n            row = this.props.position[0];\r\n            column = this.props.position[1];\r\n            row++;\r\n        } else {\r\n            row = 1;\r\n            column = this.props.position[0];\r\n        }\r\n        column++;\r\n\r\n        const gridPosition = {\r\n            \"gridColumn\": column + \"/\" + (column + 1),\r\n            \"gridRow\": row + \"/\" + (row + 1)\r\n        };\r\n        if (!this.props.open) {\r\n            return (\r\n                <div className=\"date\" style={gridPosition}\r\n                onClick={() => this.openHandler(this.props.number)}\r\n                >\r\n                    {this.props.number}\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n\r\n                <div className=\"date-opened\" style={gridPosition}>{this.props.joke}</div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default Date;","import React from 'react';\r\nimport Date from './Date';\r\n\r\nclass Grid extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dates: [],\r\n            jokes: []\r\n\r\n        };\r\n\r\n\r\n    }\r\n\r\n    openDate = (number) => {\r\n        /*\r\n        console.log(\"Compare here\");\r\n        \r\n        console.log(this.state.dates[number-1]);\r\n        const newDates = this.state.dates;\r\n        newDates[number-1][\"open\"] = true;\r\n        this.setState({dates: newDates});\r\n        console.log(this.state.dates[number-1]);\r\n        \r\n       console.log(number);\r\n       let newDates = [...this.state.dates];\r\n       let date = {...newDates[number-1]};\r\n       date.open = true;\r\n       newDates[number-1] = date;\r\n       this.setState({dates: newDates});\r\n        \r\n       let date = {...this.state.dates[number-1]};\r\n       date.open = true;\r\n       \r\n       let newDates = [...this.state.dates];\r\n       newDates[number-1] = date;\r\n       this.setState({dates: newDates});\r\n       */\r\n        let newDates = [...this.state.dates];\r\n        newDates[number - 1] = { ...newDates[number - 1], open: true };\r\n        this.setState({ dates: newDates });\r\n\r\n\r\n    }\r\n\r\n    reorder = () => {\r\n        let dates = [...this.state.dates];\r\n        let positions = new Set();\r\n        let newDates = dates.map(date => {\r\n            const newPosition = this.generateUniqueNumber(positions);\r\n            positions.add(newPosition);\r\n            date.position = newPosition.toString();\r\n            return date;\r\n        });\r\n        //console.log(closedDates);\r\n        this.setState({ dates: newDates });\r\n    }\r\n\r\n    reset = () => {\r\n        let dates = [...this.state.dates];\r\n        let closedDates = dates.map(date => {\r\n            date.open = false;\r\n            return date;\r\n        });\r\n        //console.log(closedDates);\r\n        this.setState({ dates: closedDates });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        console.log(this.state.dates);\r\n        return (\r\n            <div className=\"grid\"> {\r\n                this.state.dates.map(date => {\r\n                    return (<\r\n                        Date key={date.number}\r\n                        number={date.number}\r\n                        open={date.open}\r\n                        openDate={this.openDate}\r\n                        position={date.position}\r\n                        joke={date.joke}\r\n                    />\r\n                    );\r\n                })\r\n            }\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    generateUniqueNumber = (numberSet) => {\r\n                let number = Math.floor((100 - 1) * Math.random()) + 1;\r\n\r\n        while (numberSet.has(number)) {\r\n                number = Math.floor((100 - 1) * Math.random()) + 1;\r\n        }\r\n        return number;\r\n    }\r\n\r\n    generateNewDates = (jokes) => {\r\n                let positions = new Set();\r\n        let newDates = [];\r\n\r\n        for (let i = 1; i <= 24; i++) {\r\n                let position = this.generateUniqueNumber(positions);\r\n            positions.add(position);\r\n            newDates.push({\r\n                \"number\": i,\r\n                \"position\": position.toString(),\r\n                \"joke\": jokes[i - 1],\r\n                \"open\": false\r\n            });\r\n        }\r\n        return newDates;\r\n    }\r\n\r\n\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch(\"http://api.icndb.com/jokes/random/24\");\r\n        const joke_data = await response.json();\r\n        const jokes = await joke_data.value.map(j => j.joke);\r\n        //console.log(jokes);\r\n        this.setState({ jokes: jokes });\r\n        const newDates = this.generateNewDates(jokes);\r\n\r\n        this.setState({ dates: newDates });\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Grid;","import './App.css';\nimport Grid from './components/Grid';\nimport React from 'react';\n\n\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.grid = React.createRef();\n  }\n\n \n  resetGrid = () => {\n    this.grid.current.reset();\n  }\n\n  reorderGrid = () => {\n    this.grid.current.reorder();\n  }\n\n  render(){\n     \n\n    return (\n      \n      <div className=\"App\">\n        \n        <div className=\"navbar\">\n                <button className=\"navbar-btn\" onClick={this.reorderGrid}>Reorder</button>\n                <button className=\"navbar-btn\" onClick={this.resetGrid}>Reset</button>\n                 \n            </div>\n        <div className=\"grid-box\">\n          <Grid ref={this.grid}/>\n         \n        </div>\n        \n      </div>\n     \n    );\n   }\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}